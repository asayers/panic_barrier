              ==============================================
              panic_barrier - block until some thread panics
              ==============================================

Create a global panic barrier using lazy_static, and initialise it from your
main thread.  Any thread can then block on the barrier.  If any thread panics,
all threads which are waiting on the barrier will immediately unblock.

    lazy_static! {
        static ref PANIC_BARRIER: PanicBarrier = PanicBarrier::new();
    }

    fn main() {
        // Initialise the PanicBarrier
        PANIC_BARRIER.init();

        thread::spawn(|| {
            thread::sleep(Duration::from_millis(100));
            panic!();
        });

        let h = thread::spawn(|| {
            PANIC_BARRIER.wait();
            println!("ok!");
        });

        h.join().unwrap();
    }

LICENCE

Licensed under either of the following, at your option:

 * Apache Licence 2.0 (see LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0)
 * MIT licence (see LICENSE-MIT or http://opensource.org/licenses/MIT)

Unless you explicitly state otherwise, any contribution intentionally submitted
for inclusion in the work by you, as defined in the Apache-2.0 license, shall
be dual licensed as above, without any additional terms or conditions.
